name: Apply DSC Configuration

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Azure Terraform Create"]
    types:
      - completed

jobs:
  dsc:
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download Inventory from Azure Blob
        env: 
          STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
          CONTAINER_NAME: ${{ vars.AZURE_TERRAFORM_INVENTORY }}
        run: |
          az storage blob download --account-name $env:STORAGE_ACCOUNT --container-name $env:CONTAINER_NAME --name inventory.json --file inventory.json
          if (!(Test-Path -Path "inventory.json")) {
          Write-Output "inventory.json found."
          }
    
      - name: Verify Inventory JSON
        run: cat inventory.json  # Debugging step

      - name: Extract Windows Hosts from Inventory JSON
        shell: powershell
        run: |
          if (!(Test-Path -Path "inventory.json")) {

          # Filter down From Windows/Linux to only Windows
          $inventory = Get-Content -Path inventory.json | ConvertFrom-Json
          $windowsHosts = $inventory.all.children.windows.hosts
          $windowsHosts | ConvertTo-Json -Depth 10 | Out-File "windows_inventory.json"
          Write-Output "Windows Hosts: $windowsHosts"
            }
          else {  
          Write-Output "inventory.json not found."
          }

      - name: Download DSC Script
        shell: powershell
        run: |
        
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/philipgumm/azure-terraform-demo/refs/heads/master/dsc/application_tier_dsc.ps1" -OutFile "application_tier_dsc.ps1"
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/philipgumm/azure-terraform-demo/refs/heads/master/dsc/web_tier_dsc.ps1" -OutFile "web_tier_dsc.ps1"
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/philipgumm/azure-terraform-demo/refs/heads/master/dsc/database_tier_dsc.ps1" -OutFile "database_tier_dsc.ps1"
        
      - name: Copy DSC Script to Remote Hosts & Apply Configuration
        shell: powershell
        run: |
          
          # Bugger, need to change this as it's being generated remember. !!! After deletion it won't be there any more.
          $windowsHosts = Get-Content -Path "windows_inventory.json" | ConvertFrom-Json
      
          $serverObjects = @()

          # Need to know whether this contains the full object
          foreach ($vm in $windowsHosts.PSObject.Properties.Name) {
            
            $hostName = $vm
            $ip = $windowsHosts.$vm.host
            $username = $windowsHosts.$vm.user

            write-output "Host: $hostName | IP: $ip | Username: $username"

          $serverObjects += $vm
          
          switch ($hostName) {

            "app-win-srv" {$dscScript = "application_tier_dsc.ps1"; break }
            "web-win-srv" {$dscScript = "web_tier_dsc.ps1"; break }
            "dbs-win-srv" {$dscScript = "database_tier_dsc.ps1"; break }
            Default {Write-Host "No matching DSC script found for server $($vm.name)"}

            }

            $username = "adminuser"
            $password = ConvertTo-SecureString -String "${{ vars.LOCAL_WINDOWS_PASSWORD }}" -AsPlainText -Force
            $cred = New-Object System.Management.Automation.PSCredential ($username, $password)

            Copy-Item -Path "dsc\$dscScript" -Destination "C:\temp\$dscScript" -ToSession (New-PSSession -ComputerName $hostName -Credential $cred -UseSSL -SessionOption (New-PSSessionOption -SkipCACheck))

            Invoke-Command -ComputerName $hostname -Credential $cred -UseSSL -ScriptBlock {Set-Location -Path "C:\temp\$dscScript";
                
            Start-DscConfiguration -Path "C:\temp\$dscScript" -Wait -Force -Verbose} -SessionOption (New-PSSessionOption -SkipCACheck) 
          }
          
 
        
          # Remember the DNS look up over the VPN after you've finished this. 
