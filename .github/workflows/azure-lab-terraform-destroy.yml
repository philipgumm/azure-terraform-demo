name: "Azure Terraform Destroy" 
# Need to run something to unlock the state file
on:
  schedule:
    - cron: "0 18 * * *" # Runs every Sunday at midnight UTC
  workflow_dispatch: # Manual trigger
  workflow_run:
    workflows: ["Azure Terraform Create"]
    types:
      - completed


permissions:
      id-token: write
      contents: read

env:
      TF_VAR_azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
      TF_VAR_azure_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
      TF_VAR_azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_local_windows_user: ${{ secrets.LOCAL_WINDOWS_USER }}
      TF_VAR_local_windows_password: ${{ vars.LOCAL_WINDOWS_PASSWORD }}
      TF_VAR_root_certificate_data: ${{ vars.root_certificate_data }}

jobs:
  terraform-destroy:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.schedule || github.event.workflow_run.conclusion == 'failure' }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Log in to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.6.0 

    - name: "Terraform Init"
        id: init
        run: | 
          terraform init \
          -backend-config="resource_group_name=LabManagement" \
          -backend-config="storage_account_name=labmanagementstorage01" \
          -backend-config="container_name=azure-terraform-demo" \
          -backend-config="key=terraform.tfstate"

    - name: Get Terraform State Lock ID
      id: get_lock
      continue-on-error: true
      run: |
          terraform providers lock -json | jq -r '.lock_id' > lock_id.txt
          cat lock_id.txt

    - name: Unlock Terraform State (if locked)
      if: ${{ steps.get_lock.outcome == 'success' }}
      run: |
          LOCK_ID=$(cat lock_id.txt)
          if [[ ! -z "$LOCK_ID" ]]; then
            echo "Unlocking Terraform state..."
            terraform force-unlock -force "$LOCK_ID"
          else
            echo "No lock detected, proceeding with destroy."
          fi

    - name: Pull Current State 
      run: terraform refresh

    - name: Terraform Plan Destroy
      run: terraform plan -lock=false -destroy -out=destroy.plan

    - name: Terraform Apply Destroy
      run: terraform apply -auto-approve -lock=false destroy.plan
